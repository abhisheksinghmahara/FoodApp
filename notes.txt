if not starting from start
git add . ==> for staging if any changes are there
git commit -m "comment" ==>for add comment
git push origin main   ==>push code to github


git branch ==> to check branch name we are working in
git checkout -b branchname ==> to create a branch
git push --set-upstream origin branchname==>push code to the git branch for first time
git push==> push code to the branch

npm init ==> package.json
npm install -D parcel ==>node module, package.lock.json
npx parcel index.html- dist, .parcel-cache
npm install react ==> for react install
npm install react-dom==> for react-dom install

npm install ==>if we have our package.json and package.lock.json and if we delete dist, node modules
npx parcel index.html==>if we delete .parcel-cache we can retrieve all them by it

config driven UI==>

Key attribute while looping through data==> when we use any looping or map through our data we should use key attribute to it because if there some more data is added without use of key attribute, so react will not be able to identify that new data and re-renders all the data which will make our website slow. So using key attribute helps to identify the new data and react only renders that new data. So we can say key attribute helps in optimization.

React hook-->these are normal javascipt utility functions which is given to us by React

$State ==>The state is a built-in React object that is used to contain data or information about the component. A component's state can change over time; whenever it changes, the component re-renders.

$usestase State variable ==>Use state is to create state variable. It maintains the state of your variable or can say component. useState is a React Hook that lets you add a state variable to your component.

$DOM==>document object module is a tree like structure of components like div tag, header tag etc 

$Virtual DOM==> It is a representation of the actual DOM. 
[console.log(<Component_name/>)]. The object representation a lots of jsx tags and elements inside it and elements generally known as virtual DOM. This vitual DOM makes the react rendering faster because it is faster at manipulating and changing the UI layer according the state variable changes of the component. 

Reconciliation algorthym(react fiber)==>
Diff algorthym==>This basically finds out the difference between the two virtual DOM [old vDOM and new vDOM]. And calculate the difference and updates
app.js content
// const heading= document.createElement("h1");
// heading.innerHTML="This is a food app in javascipt"
// const root=document.getElementById("root").appendChild(heading);

import React from "react";
import ReactDOM from "react-dom/client";

// // const heading= React.createElement("h1",{id:"head"},"I am react heading");
// // const heading=("hi");
// const heading=<h1>this is jsx element</h1>
// const root=ReactDOM.createRoot(document.getElementById("root"));
// root.render(heading);

//Functional component
// const FunctionalComponent=()=>{
//     return(
//         <h1>This is a functional component</h1>
//     );
// }
// const FunctionalComponent=()=>(
//     <h1>This is also a functional component but used for one line usually</h1>
// )
// const root=ReactDOM.createRoot(document.getElementById("root"));
// root.render(<FunctionalComponent/>);

//Composite component
const span='span element';
const Jcompo= ( <h1>This is a jsx element</h1>);//this variable name starts with capital keep in mind
const jcomponent= ( <h1>This is a jsx element</h1>);

const FunctionalComponent1=()=>(
    <h1>Functional component1</h1>
)
const FunctionalComponent2=()=>{
    return (
        <div id="child">
            <h2>{200+400}</h2>
            <h1>This is functoinal component2</h1>
        </div>
    )
}
const functionalComponent3=()=>{
    return (
        <div id="child">
            <h2>{200+400}</h2>
            <h1>This is functoinal component2</h1>
        </div>
    )
}
 
const Rendered=()=>{
    return(
        <div id="parent">
            <h1>{span}</h1>
            {Jcompo}
            {jcomponent}
            <span>{FunctionalComponent1()}</span>
            <FunctionalComponent1/>
            {/* {FunctionalComponent1} not valid */}
            <span>{FunctionalComponent2()}</span>
            <FunctionalComponent2/>
            {functionalComponent3()}
        </div>
    );
}
const root=ReactDOM.createRoot(document.getElementById("root"));
root.render(<Rendered/>)